# Build the package, release new version and publish it to PyPI after tests pass
# References:
# - https://discourse.jupyter.org/t/use-github-workflows-to-automatically-publish-to-pypi-when-new-tags-are-created/14941/2
# - https://dev.to/this-is-learning/manually-trigger-a-github-action-with-workflowdispatch-3mga
# - https://maciek.land/blog/automatic-releases-with-github-actions
# - https://www.loopwerk.io/articles/2021/automating-changelog/


name: Release new version
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Please specify version, e.g.: v0.3.5"
        default: "v0.0.0"
jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Check permissions
        uses: actions-cool/check-user-permission@v2
        id: checkUser
        with:
          require: 'admin'
  check:
    needs: verify
    uses: ./.github/workflows/CI.yml
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: check
    runs-on: ubuntu-latest

    # Specifying a GitHub environment for PyPI release is optional, but strongly encouraged
    environment: 
      name: pypi
      url: https://pypi.org/p/sparc.client
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing on PyPI
      id-token: write
      contents: write
      packages: write

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate an installation access token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SPARC_TECH_LEADS_BOT_SSH_KEY }}

      - name: Configure git user
        run: |
          git config user.email "github-actions[bot]@github.com"
          git config user.name "GitHub Actions (run by ${{ github.actor }})"
          git remote set-url origin git@github.com:nih-sparc/sparc.client.git
          git remote -v

      - name: Check for conventional commits
        id: check_commits
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD)
          echo "Previous tag: $PREV_TAG"
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"%s" | grep -E "^(feat|fix|chore|docs|style|refactor|perf|test)(\\(.+\\))?:" || true)
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Determine fallback label from PRs in commit range
        id: label_check
        run: |
          git fetch --tags
          PREV_TAG=${{ steps.check_commits.outputs.prev_tag }}

          # Get merged PRs between tags
          PR_NUMBERS=$(git log $PREV_TAG..HEAD --merges --pretty=format:"%s" | grep -oE "#[0-9]+" | tr -d '#' | sort -u)

          LABEL=""
          for PR in $PR_NUMBERS; do
            echo "Checking PR #$PR"
            PR_LABEL=$(gh pr view $PR --json labels -q ".labels[].name" | grep -E "feat|fix|chore" | head -n 1)
            if [ ! -z "$PR_LABEL" ]; then
              LABEL=$PR_LABEL
              break
            fi
          done

          if [ -z "$LABEL" ]; then
            LABEL="chore"
          fi

          echo "label=$LABEL" >> $GITHUB_OUTPUT

      - name: Get and save current branch protection rules
        if: ${{ steps.check_commits.outputs.commits == '' }}
        id: get-rules
        env:
          # Use the app's token for API calls
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          BRANCH_NAME: main
        run: |
          # The '|| true' prevents the workflow from failing if no rules are found
          gh api "repos/${{ github.repository }}/branches/${BRANCH_NAME}/protection" > current_protection_rules.json || true
          
          if [ -s current_protection_rules.json ]; then
            echo "Existing branch protection rules saved."
            echo "rules_exist=true" >> $GITHUB_ENV
          else
            echo "No existing branch protection rules found."
            echo "rules_exist=false" >> $GITHUB_ENV
          fi

      - name: Disable branch protection
        if: ${{ steps.check_commits.outputs.commits == '' }} && env.rules_exist == 'true'
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          BRANCH_NAME: main
        run: |
          echo "Disabling branch protection..."
          gh api --method DELETE "repos/${{ github.repository }}/branches/${BRANCH_NAME}/protection"

      - name: Add fallback commit if no valid commits
        if: ${{ steps.check_commits.outputs.commits == '' }}
        run: |
          git commit --allow-empty -m "${{ steps.label_check.outputs.label }}: [fallback commit] Full Changelog: https://github.com/nih-sparc/sparc.client/compare/${{ steps.check_commits.outputs.prev_tag }}...${{ github.event.inputs.version }}"
          git push origin main

      - name: Restore branch protection
        # This step will run even if the previous steps fail.
        if: always() && env.rules_exist == 'true'
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          BRANCH_NAME: main
        run: |
          echo "Restoring branch protection rules..."
          jq 'del(.url, .required_pull_request_reviews.url, .required_status_checks.url, .restrictions.url, .restrictions.users_url, .restrictions.teams_url, .restrictions.apps_url)' current_protection_rules.json > protection_payload.json
          
          gh api \
            --method PUT "repos/${{ github.repository }}/branches/${BRANCH_NAME}/protection" \
            -H "Accept: application/vnd.github.v3+json" \
            --input protection_payload.json

      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: ${{ github.token }}
          tag: ${{ github.event.inputs.version }}

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.event.inputs.version }}

      - name: Commit and push CHANGELOG.md
        uses: EndBug/add-and-commit@v9
        with:
          add: CHANGELOG.md
          message: "chore: Update CHANGELOG.md"
          pull: '--rebase --autostash'
          tag: '-a ${{ github.event.inputs.version }} -m ${{ github.event.inputs.version }} --force'
          tag_push: '--force'

      - name: Build package
        run: |
          python -m pip install -U pip build
          python -m build

      - name: Publish Distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.event.inputs.version }}
          tag: ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}
